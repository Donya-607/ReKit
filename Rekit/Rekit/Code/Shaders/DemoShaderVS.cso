//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBufferDemo
// {
//
//   row_major float4x4 cbWorldViewProjection;// Offset:    0 Size:    64
//   row_major float4x4 cbWorld;        // Offset:   64 Size:    64
//   float4 cbLightDirection;           // Offset:  128 Size:    16
//   float4 cbLightColor;               // Offset:  144 Size:    16 [unused]
//   float4 cbMaterialColor;            // Offset:  160 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBufferDemo                       cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         7  ( FLT, FLT, FLT, FLT)
// c8         cb0             8         1  ( FLT, FLT, FLT, FLT)
// c9         cb0            10         1  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c10, 0, 1, 0.5, 0
    dcl_texcoord v0  // vin<0,1,2,3>
    dcl_texcoord1 v1  // vin<4,5,6,7>

#line 7 "D:\Develop\ReKit\ReKit\ReKit\ReKit\Code\Shaders\DemoShaderVS.hlsl"
    mul r0, v1.x, c5
    mul r1, v1.y, c6
    add r0, r0, r1
    mul r1, v1.z, c7
    add r0, r0, r1
    add r0, r0, c10.x
    dp4 r1.x, r0, r0
    rsq r1.x, r1.x
    mul r0, r0, r1.x  // ::norm<0,1,2,3>
    mov r1, -c8
    dp4 r2.x, r1, r1
    rsq r2.x, r2.x
    mul r1, r1, r2.x  // ::light<0,1,2,3>
    dp4 r0.x, r1, r0
    max r0.x, r0.x, c10.x
    min r0.x, r0.x, c10.y  // ::NL<0>
    mul r0.x, r0.x, c10.z
    add r0.x, r0.x, c10.z  // ::NL<0>

#line 14
    mul r1, v0.x, c1
    mul r2, v0.y, c2
    add r1, r1, r2
    mul r2, v0.z, c3
    add r1, r1, r2
    mul r2, v0.w, c4
    add r1, r1, r2  // ::vout<0,1,2,3>
    mul r0.xyz, r0.x, c9  // ::vout<4,5,6>
    mov r0.w, c9.w  // ::vout<7>
    mov oT0.xyz, r0  // ::main<4,5,6>
    mov oT0.w, r0.w  // ::main<7>
    mov r1, r1  // ::main<0,1,2,3>

#line 3
    mul r0.xy, r1.w, c0
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r1  // ::main<2,3>

// approximately 33 instruction slots used
vs_4_0
dcl_constantbuffer CB0[11], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- vin.pos.x; v0.y <- vin.pos.y; v0.z <- vin.pos.z; v0.w <- vin.pos.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.pos.x; o0.y <- <main return value>.pos.y; o0.z <- <main return value>.pos.z; o0.w <- <main return value>.pos.w
//
#line 5 "D:\Develop\ReKit\ReKit\ReKit\ReKit\Code\Shaders\DemoShaderVS.hlsl"
itof r0.x, l(0)  // r0.x <- vin.normal.w

#line 7
mul r1.xyzw, v1.xxxx, cb0[4].xyzw
mul r2.xyzw, v1.yyyy, cb0[5].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v1.zzzz, cb0[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, cb0[7].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
dp4 r1.x, r0.xyzw, r0.xyzw
rsq r1.x, r1.x
mul r0.xyzw, r0.xyzw, r1.xxxx  // r0.x <- norm.x; r0.y <- norm.y; r0.z <- norm.z; r0.w <- norm.w

#line 8
mov r1.xyzw, -cb0[8].xyzw
dp4 r2.x, r1.xyzw, r1.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx  // r1.x <- light.x; r1.y <- light.y; r1.z <- light.z; r1.w <- light.w

#line 10
dp4 r0.x, r1.xyzw, r0.xyzw
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // r0.x <- NL

#line 11
mul r0.x, r0.x, l(0.500000)
add r0.x, r0.x, l(0.500000)  // r0.x <- NL

#line 14
mul r1.xyzw, v0.xxxx, cb0[0].xyzw
mul r2.xyzw, v0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- vout.pos.x; r1.y <- vout.pos.y; r1.z <- vout.pos.z; r1.w <- vout.pos.w

#line 15
mul r0.xyz, r0.xxxx, cb0[10].xyzx  // r0.x <- vout.color.x; r0.y <- vout.color.y; r0.z <- vout.color.z

#line 16
mov r0.w, cb0[10].w  // r0.w <- vout.color.w

#line 17
mov o0.xyzw, r1.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r0.w
ret 
// Approximately 33 instruction slots used
